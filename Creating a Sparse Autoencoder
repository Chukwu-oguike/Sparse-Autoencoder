{"cells":[{"cell_type":"markdown","metadata":{"id":"NWthF3_ZSBuz"},"source":["In this project we implement a sparse autoencoder for image compression. In order to do this we implement the following steps\n","\n","\n","*   Implement forward propagation in your neural network, and implement the squared error term of the cost function.  Implement backpropagation to compute the derivatives.   Then (using lambda=beta=0), we run Gradient Checking to verify that the calculations corresponding to the squared error cost term are correct.\n","\n","*   Add in the weight decay term (in both the cost function and the derivative calculations), then re-run Gradient Checking to verify correctness.\n","\n","*   Add in the sparsity penalty term, then re-run Gradient Checking to verify correctness."]},{"cell_type":"code","source":["import math\n","import matplotlib.pyplot as plt\n","import matplotlib.cm as cm\n","import numpy as np\n","import random\n","import gc\n","import scipy.optimize\n","from scipy.io import loadmat\n","from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"MdAI7EvAZZ6X"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ot_M7XxvYHnK"},"outputs":[],"source":["\n","def sigmoid(Z):\n","    A = 1 / (1 + np.exp(-Z))\n","    return A\n","\n","\n","def sigmoid_gradient(Z):\n","    A = sigmoid(Z)\n","    dZ = A * (1 - A)\n","\n","    return dZ\n","\n","def sparse_autoencoder_cost(theta, visible_size, hidden_size, decay_lambda, sparsity_param, beta, data):\n","\n","    # get indices of each variable in theta\n","    vis_idx = visible_size * hidden_size\n","    hidden_idx = visible_size * hidden_size + vis_idx\n","    hidden_bias_idx = hidden_idx + hidden_size\n","    visible_bias_idx = hidden_bias_idx + visible_size\n","\n","    # get weights from flatten dataset\n","    visible_weights = theta[0:vis_idx]\n","    hidden_weights = theta[vis_idx:hidden_idx]\n","    hidden_bias = theta[hidden_idx:hidden_bias_idx]\n","    visible_bias = theta[hidden_bias_idx:visible_bias_idx]\n","    m = len(data)\n","\n","    # calculate weights for 1st and 2nd layer\n","    W1 = np.reshape(visible_weights, (hidden_size, visible_size))\n","    W2 = np.reshape(hidden_weights, (visible_size, hidden_size))\n","\n","\n","    z2 = np.dot(W1, data.transpose())\n","\n","    for i in range(0,z2.shape[1]):\n","        z2[:,i] = z2[:,i] + hidden_bias\n","\n","    a2 = sigmoid(z2)\n","    z3 = np.dot(W2, a2)\n","\n","    for i in range(0,z3.shape[1]):\n","        z3[:,i] = z3[:,i] + visible_bias\n","\n","    a3 = sigmoid(z3)\n","\n","\n","    # calculate average activation of hidden unit\n","    rho = np.empty_like(a2[:,1], dtype=float)\n","\n","    for i in range(0,len(rho)):\n","        rho[i] = np.sum(a2[i,:])*(1/m)\n","\n","    # Calculate cos\n","    KLp_pl = sparsity_param*np.log(sparsity_param/rho) + (1 - sparsity_param)*np.log((1 - sparsity_param)/(1 - rho))\n","\n","    reg_term = (np.linalg.norm(theta[0:hidden_idx]))**2\n","\n","    diff = a3 - data.transpose()\n","\n","    JWBxy = [0.5*np.square(np.linalg.norm(diff[:,i])) for i in range(0,diff.shape[1])]\n","\n","    cost = (1/m)*np.sum(JWBxy) + (decay_lambda/2)*reg_term + beta * np.sum(KLp_pl)\n","\n","    # caculate gradient\n","    d3 = -(data.transpose() - a3) * sigmoid_gradient(z3)\n","    temp2 = (sparsity_param/rho) + (1 - sparsity_param)/(1 - rho)\n","    d2 = np.dot(W2.transpose(), d3)\n","\n","    for i in range(0,d2.shape[1]):\n","        d2[:,i] = d2[:,i] + beta * temp2\n","\n","    d2 = d2 * sigmoid_gradient(z2)\n","\n","    # get average cost gradient per weight for W1\n","    grad_w2 = np.zeros(W2.shape, dtype=float)\n","    for i in range(d3.shape[1]):\n","        grad_w2 = grad_w2 + np.dot(d3[:,i].reshape(len(d3), 1), a2[:,i].reshape(1, len(a2)))\n","\n","    grad_w2 = (grad_w2 * 1/m) + (decay_lambda*W2)\n","\n","    # get average cost gradient per weight for W2\n","    grad_w1 = np.zeros(W1.shape, dtype=float)\n","    for i in range(d2.shape[1]):\n","        grad_w1 = grad_w1 + np.dot(d2[:,i].reshape(len(d2), 1), data[i,:].reshape(1,data.shape[1]))\n","\n","    grad_w1 = (grad_w1 * 1/m )+ (decay_lambda*W1)\n","\n","    # get average cost gradient per weight for B1 and B2\n","    grad_b2 = np.sum(d3, axis=1)/m\n","    grad_b1 = np.sum(d2, axis=1)/m\n","\n","    grad = np.concatenate((grad_w1.flatten(), grad_w2.flatten(), grad_b1.flatten(), grad_b2.flatten()))\n","\n","    return cost, grad"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AYyvXW-kXqAn"},"outputs":[],"source":["cost, grad = sparse_autoencoder_cost(theta, visible_size, hidden_size, decay_lambda, sparsity_param, beta, patches)"]},{"cell_type":"code","source":[],"metadata":{"id":"UnfLWK48RDI4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qBwj0MA1BmFz"},"source":["**STEP 2:** We create a function that samples image pathces from a dataset and another function for displaying the image patch sampled`\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2hglZn99AIBL"},"outputs":[],"source":["patch_size = 8\n","num_patches = 10000\n","visible_size = 8*8;     # number of input units\n","hidden_size = 25;       # number of hidden units\n","sparsity_param = 0.01;  # desired average activation of the hidden units.\n","                        # (This was denoted by the Greek alphabet rho, which\n","                        # looks like a lower-case \"p\", in the lecture notes).\n","decay_lambda = 0.0001;  # weight decay parameter (lambda)\n","beta = 3;               # weight of sparsity penalty term"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"48IeOvoobJOR"},"outputs":[],"source":["# This function visualizes filters in matrix A. Each row of A is a\n","# filter. We will reshape each row into a square image and visualizes\n","# on each cell of the visualization panel.\n","def display_network(data, cols=-1, opt_normalize=True, opt_graycolor=True, save_figure_path=None):\n","\n","    # rescale\n","    data -= np.mean(data)\n","\n","    # compute rows, cols\n","    num, area = data.shape\n","    sz = int(math.sqrt(area))\n","    buf = 1\n","    if cols < 0:\n","        if math.floor(math.sqrt(num)) ** 2 != num:\n","            n = math.ceil(math.sqrt(num))\n","            while num % n != 0 and n < 1.2 * math.sqrt(num):\n","                n += 1\n","                m = math.ceil(num / n)\n","        else:\n","            n = math.sqrt(num)\n","            m = n\n","    else:\n","        n = cols\n","        m = math.ceil(num / n)\n","    n = int(n)\n","    m = int(m)\n","\n","    array = -np.ones((buf + m * (sz + buf), buf + n * (sz + buf)))\n","\n","    if not opt_graycolor:\n","        array *= 0.1\n","\n","    k = 0\n","    for i in range(m):\n","        for j in range(n):\n","            if k >= num:\n","                continue\n","            if opt_normalize:\n","                clim = np.amax(np.absolute(data[k, :]))\n","            else:\n","                clim = np.amax(np.absolute(data))\n","            array[buf + i * (sz + buf):buf + i * (sz + buf) + sz,\n","            buf + j * (sz + buf):buf + j * (sz + buf) + sz] = data[k, :].reshape([sz, sz]) / clim\n","            k += 1\n","\n","    # simulate imagesc\n","    ax = plt.figure().gca()\n","    pix_width = 5\n","    h, w = array.shape\n","    exts = (0, pix_width * w, 0, pix_width * h)\n","    if opt_graycolor:\n","        ax.imshow(array, interpolation='nearest', extent=exts, cmap=cm.gray)\n","    else:\n","        ax.imshow(array, interpolation='nearest', extent=exts)\n","\n","    plt.axis('off')\n","\n","    if save_figure_path:\n","        plt.savefig(save_figure_path)\n","\n","    plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FjpM5nAvUjp3"},"outputs":[],"source":["def initialize_parameters(hidden_size, visible_size):\n","    # Initialize parameters randomly based on layer sizes.\n","    r = math.sqrt(6) / math.sqrt(hidden_size + visible_size + 1)  # we'll choose weights uniformly from the interval [-r, r]\n","    w1 = np.random.rand(visible_size, hidden_size) * 2 * r - r\n","    w2 = np.random.rand(hidden_size, visible_size) * 2 * r - r\n","\n","    b1 = np.zeros((1, hidden_size))\n","    b2 = np.zeros((1, visible_size))\n","\n","    # Convert weights and bias gradients to the vector form.\n","    # This step will \"unroll\" (flatten and concatenate together) all\n","    # your parameters into a vector, which can then be used with minFunc.\n","    theta = np.concatenate((w1.flatten(), w2.flatten(), b1.flatten(), b2.flatten()))\n","\n","    return theta"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w-yLpdTPIft1"},"outputs":[],"source":["# TODO:\n","def normalize_data(patches):\n","\n","    for i in range(0,len(patches)):\n","        temp = patches[i] - patches[i].mean()\n","        sigm3 = 3 * patches[i].std()\n","        temp1 = temp[(temp>=-sigm3) * (temp<=sigm3)]\n","        temp1 = temp1 / sigm3\n","        patches[i] = ((temp1+1) * 0.4) + 0.1\n","\n","    return patches\n","\n","def sample_images(patch_size, num_patches):\n","\n","    images = loadmat('/content/drive/My Drive/IMAGES.mat')['IMAGES']  # load images from disk\n","\n","    split_idx = images.shape[0] / patch_size\n","\n","    new_l = []\n","    for i in range(0,images.shape[2]):\n","\n","        l = np.array_split(images[:,:,i],split_idx,axis=0)\n","\n","        for iters in l:\n","            l = np.array_split(iters, split_idx, axis=1)\n","            l = [a.flatten() for a in l]\n","            new_l += l\n","\n","    new_l = np.array(new_l)\n","    idx = np.random.randint(len(images[0]), size=num_patches)\n","\n","    patches = new_l[idx,:]\n","\n","    return patches"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5e-sIeVCIc_4","executionInfo":{"status":"ok","timestamp":1648948775615,"user_tz":240,"elapsed":1056,"user":{"displayName":"Chukwuemeka Oguike","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01497694623157659581"}},"outputId":"ed81a864-a2c5-4e53-f3c3-73d3194f730d","colab":{"base_uri":"https://localhost:8080/","height":248}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["patches = sample_images(patch_size, num_patches)\n","display_network(patches[np.random.randint(patches.shape[0], size=100), :])\n","\n","# Obtain random parameters theta\n","theta = initialize_parameters(hidden_size, visible_size)"]},{"cell_type":"markdown","metadata":{"id":"0memAWRGXwdJ"},"source":["**Step 3:** Gradient Checking\n","\n","We performing gradient checking on smaller models and smaller training sets to speed things up."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lXT2xQg7ULS9"},"outputs":[],"source":["# TODO:\n","# theta: a vector of parameters\n","# func: a function that outputs a real-number. Calling y = J(theta) will return the\n","# function value at theta.\n","def compute_numerical_gradient(func, theta, *args):\n","\n","    # Initialize numgrad (no need to initialize to zero, empty_like is a good fit here)\n","    numgrad = np.empty_like(theta, dtype=float) # YOU ARE SUPPOSED TO CHANGE STUFF IN THIS\n","\n","    EPSILON = 0.0001\n","    dim = len(numgrad)\n","\n","\n","    for i in range(0, dim):\n","\n","        e = np.eye(1, dim, k=i, dtype=float)\n","        t1 = theta + (EPSILON * e[0])\n","        t2 = theta - (EPSILON * e[0])\n","\n","        J1, grad1 = func(t1, *args)\n","        J2, grad2 = func(t2, *args)\n","\n","        numgrad[i] = (J1 - J2) / (2 * EPSILON)\n","\n","    return numgrad"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GfsCip6e0slS"},"outputs":[],"source":["# this function accepts a 2D vector as input.\n","# Its outputs are:\n","# value: h(x1, x2) = x1^2 + 3*x1*x2\n","# grad: A 2x1 vector that gives the partial derivatives of h with respect to x1 and x2\n","# Note that when we pass @simpleQuadraticFunction(x) to computeNumericalGradients, I'm assuming\n","# that computeNumericalGradients will use only the first returned value of this function.\n","def simple_quadratic_function(x):\n","    value = pow(x[0], 2) + 3*x[0]*x[1]\n","    grad = np.zeros(2)\n","    grad[0]  = 2*x[0] + 3*x[1]\n","    grad[1]  = 3*x[0]\n","    return value, grad"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hkPGPRLoyZft"},"outputs":[],"source":["# This function analytically evaluates the gradient of a very simple function called\n","# simpleQuadraticFunction and compares the result with your numerical\n","# solution.\n","def check_numerical_gradient():\n","    x = [4, 10]\n","    value, grad = simple_quadratic_function(x)\n","\n","    # I numerically compute the gradient of simpleQuadraticFunction at x.\n","    # (The notation \"@simpleQuadraticFunction\" denotes a pointer to a function.)\n","    numgrad = compute_numerical_gradient(simple_quadratic_function, x);\n","\n","    # Visually examine the two gradient computations.  The two columns\n","    disp = \"\\n\".join(\"{} {}\".format(x, y) for x, y in zip(numgrad, grad))\n","    print(disp)\n","    print(\"The above two columns you get should be very similar.\\n(Left-Your Numerical Gradient, Right-Analytical Gradient)\\n\\n\");\n","\n","    # Evaluation of the norm of the difference between two solutions.\n","    diff = np.linalg.norm(numgrad-grad)/np.linalg.norm(numgrad+grad);\n","    print(diff);\n","    print(\"Norm of the difference between numerical and analytical gradient (should be < 1e-9)\\n\\n\");"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"So3WH5vhyeog","executionInfo":{"status":"ok","timestamp":1648948789001,"user_tz":240,"elapsed":162,"user":{"displayName":"Chukwuemeka Oguike","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01497694623157659581"}},"outputId":"bc2d02f9-3bf8-40bb-df52-d72848bdcba7","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["37.99999999998249 38.0\n","11.999999999829924 12.0\n","The above two columns you get should be very similar.\n","(Left-Your Numerical Gradient, Right-Analytical Gradient)\n","\n","\n","2.1452381569477388e-12\n","Norm of the difference between numerical and analytical gradient (should be < 1e-9)\n","\n","\n"]}],"source":["# First, we make sure the numerical gradient computation is correct\n","check_numerical_gradient()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cF-rv9RLyuMA"},"outputs":[],"source":["# Now I check the cost function and derivative calculations\n","# for the sparse autoencoder.\n","numgrad = compute_numerical_gradient(sparse_autoencoder_cost, theta, visible_size, hidden_size, decay_lambda, sparsity_param, beta, patches)\n","\n","# We visually compare the gradients side by side\n","disp = \"\\n\".join(\"{} {}\".format(x, y) for x, y in zip(numgrad, grad))\n","print(disp)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AweZOO7Cy8Yi","executionInfo":{"status":"ok","timestamp":1648951977430,"user_tz":240,"elapsed":157,"user":{"displayName":"Chukwuemeka Oguike","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01497694623157659581"}},"outputId":"0fec1552-a766-44dd-94ed-b3dd1fa0e017","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["0.009427313607568504\n"]}],"source":["# Compare numerically computed gradients with the ones obtained from backpropagation\n","diff = np.linalg.norm(numgrad - grad)/np.linalg.norm(numgrad + grad);\n","print(diff);"]},{"cell_type":"markdown","metadata":{"id":"4iUF39lCzHTf"},"source":["**Step 4:** We start training the sparse autoencoder with scipy's minimize function."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4wmc2s6HzOP9"},"outputs":[],"source":["# Randomly initialize the parameters\n","theta = initialize_parameters(hidden_size, visible_size);\n","\n","# Here, we use L-BFGS to optimize our cost\n","# function.\n","\n","# Use scipy's minimize to minimize the function\n","res = scipy.optimize.minimize(\n","    fun=sparse_autoencoder_cost,\n","    x0=theta,\n","    args=(visible_size, hidden_size, decay_lambda, sparsity_param, beta, patches),\n","    method=\"L-BFGS-B\",\n","    jac=True,\n","    options={\"maxiter\":400,\"disp\":True});"]},{"cell_type":"markdown","metadata":{"id":"U4Vwok9QzcYy"},"source":["**STEP 5:** Visualization"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Qqy5uH8yzgQg","executionInfo":{"status":"ok","timestamp":1648867703951,"user_tz":240,"elapsed":259,"user":{"displayName":"Chukwuemeka Oguike","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01497694623157659581"}},"outputId":"43803f45-27f7-4082-9f4c-69407cbbf46c","colab":{"base_uri":"https://localhost:8080/","height":248}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["W1 = res.x[0:hidden_size * visible_size].reshape(visible_size, hidden_size)\n","display_network(W1.T, 5);"]}],"metadata":{"colab":{"provenance":[{"file_id":"15MmYIgNRFw_7Mymbj9HcDLi2jEjKhdMV","timestamp":1648952096840}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.8"}},"nbformat":4,"nbformat_minor":0}